.:RUBY:.

require "yaml"

class Create
    
    class << self
        
        def start(args)
            cfg_file = args.length > 0 ? args[0] : "config.yaml"

            if (File.file?(cfg_file))
                puts "Config file found, generating project.."
                config = YAML.load(File.read(cfg_file));
            else
                puts "Config file not found, starting a wizard.."
                config = { }
            end

            self.handle_args(config)
        end

        def get_defaults(type)
            defaults = Hash.new
            file_name = ENV['HOME']+'/.gdev/gdevconf.yml'
            if File.exist?(file_name)
                config = YAML.load(File.read(file_name))
                defaults = config['create']['defaults'][type]
            else
                puts "Could not read default file!"
            end
            return defaults
        end

        def is_yes(yesno)
            noes = [
                "n",
                "no",
                "NO",
                "N"
            ]
            if yesno.empty? || ( noes.include? yesno )
                return false
            else
                return true
            end
        end

        def handle_args(config)
            globals = {
                "name" => "",
                "session_db" => 3,
            }

            defaults = get_defaults("wordpress")

            actions = {
                "project_name" => -> (name) {
                    raise ArgumentError, "Project name can't contain whitespaces" unless !name.include?(" ")
                    puts "Project name set"
                    globals["name"] = name

                    puts "Cloning WP project to project folder.."
                    system("git clone git@github.com:devgeniem/wp-project.git #{name}")
                    
                    puts "Removing .git folder from project folder.."
                    system("rm -rf #{name}/.git")
                    
                    puts "Cloning dustpress-theme to project folder.."
                    system("git clone git@github.com:devgeniem/the-dustpress-theme.git #{name}/web/app/themes/#{name}")

                    puts "Removing .git folder from theme folder.."
                    system("rm -rf #{name}/web/app/themes/#{name}/.git")

                    # replace all name (namespace) references from all files from this project to your project name
                    puts "Replacing 'name' strings from all project files with '#{name}'..."

                    name_file_names = {
                        "#{name}/docker-compose.yml" => {
                            "replace" => /THEMENAME/,
                            "with"    => name
                        },
                        "#{name}/docker-compose-ubuntu.yml" => {
                            "replace" => /THEMENAME/,
                            "with"    => name
                        },
                        "#{name}/docker-compose.yml" => {
                            "replace" => /wordpress.test/,
                            "with"    => "#{name}.test"
                        },
                        "#{name}/docker-compose-ubuntu.yml" => {
                            "replace" => /wordpress.test/,
                            "with"    => "#{name}.test"
                        },
                        "#{name}/kontena-stage.yml" => {
                            "replace" => "asiakas",
                            "with"    => name
                        },
                        "#{name}/kontena-stage.yml" => {
                            "replace" => /Asiakas/,
                            "with"    => name.capitalize
                        },
                        "#{name}/kontena-production.yml" => {
                            "replace" => "asiakas",
                            "with"    => name
                        },
                        "#{name}/kontena-production.yml" => {
                            "replace" => /Asiakas/,
                            "with"    => name.capitalize
                        },

                    }

                    name_file_names.each do |file_name, data|
                        text = File.read(file_name) 
                        puts text
                        # remove dashes from namespace strings
                        new_contents = text.gsub(data["replace"], "#{data["with"].tr('-','')}")
                        File.open(file_name, "w") { | file | 
                            file.puts new_contents 
                        }
                    end
                    
                    
                },
                "php_session_redis_db" => -> (session_db) {
                    session_db = session_db.to_i
                    raise ArgumentError, "Redis id has to be numeric!" unless session_db.is_a? Integer
                    globals["session_db"] = session_db
                    name_file_names = {
                        "#{globals["name"]}/kontena-stage.yml" => {
                            "replace" => /PHP_SESSION_REDIS_DB: \d/,
                            "with"    => "PHP_SESSION_REDIS_DB: #{session_db}"
                        },
                        "#{globals["name"]}/kontena-production.yml" => {
                            "replace" => /PHP_SESSION_REDIS_DB: \d/,
                            "with"    => "PHP_SESSION_REDIS_DB: #{session_db}"
                        },
                    }

                    puts "Replacing redis session db.."
                    name_file_names.each do |file_name, data|
                        text = File.read(file_name)
                        new_contents = text.gsub(data["replace"], data["with"])
                        File.open(file_name, "w") {|file| file.puts new_contents }
                    end
                }, 
                "add_default_repositories" => -> (yesno) {
                    if !is_yes(yesno)
                        return
                    else
                        repositories = defaults["extra_repositories"]
                        puts "Adding repositories.."
                        repositories.each do | repository |
                            repository_cmd = "composer config #{repository}"
                            puts "cd #{globals["name"]} && #{repository_cmd}"
                            system("cd #{globals["name"]} && #{repository_cmd}")
                        end
                        packages = defaults["extra_packages"]
                        puts "Requiring packages.."
                        packages.each do | package |
                            require_cmd = "composer require #{package}"
                            puts "cd #{globals["name"]} && #{require_cmd}"
                            system("cd #{globals["name"]} && #{require_cmd}")
                        end
                        puts "Running composer install.."
                        system("cd #{globals["name"]} && composer install")
                    end
                },
                "is_multisite" => -> (yesno) {
                    if is_yes(yesno)
                        system("cd #{globals["name"]} && composer require humanmade/mercator:dev-master")
                        theme_root = "#{globals["name"]}/web/app/themes/#{globals["name"]}"
                        setup_file = "#{theme_root}/lib/Setup.php"
                        contents = File.read(setup_file)
                        new_contents = contents.gsub(/Setup hooks./, "Setup hooks.\n\t\t\\add_filter( 'mercator.sso.enabled', '__return_false' );")
                        File.open(setup_file, "w") {|file| file.puts new_contents }
                        application_file = "#{globals["name"]}/config/application.php"
                        multisite_content = [
                            "/* Multisite */",
                            "define( 'WP_ALLOW_MULTISITE', true );",
                            "define( 'MULTISITE', true );",
                            "define( 'SUBDOMAIN_INSTALL', true );",
                            "$base = '/';",
                            "// Read main site address from SERVER_NAME",
                            "define( 'DOMAIN_CURRENT_SITE', env('SERVER_NAME') );",
                            "define( 'PATH_CURRENT_SITE', '/' );",
                            "define( 'SITE_ID_CURRENT_SITE', 1 );",
                            "define( 'BLOG_ID_CURRENT_SITE', 1 );"
                        ]
                        
                        open("#{setup_file}", 'a') { |f|
                            multisite_content.each do | row |
                                f.puts("#{row}\n")
                            end
                        }

                    end

                }
                # TODO:
                # Bucketit
                # Kontena
                # Repo
                # Wizardilla yaml tiedoston luominen
            }

            actions.each do | command, action |
                if (config.key?(command))
                    action.call(config[command])
                else
                    beautify = command.capitalize.gsub(/_/, " ")
                    puts "#{beautify} not set."
                    puts "Give #{beautify}:"
                    argument = gets
                    argument = argument.strip
                    action.call(argument)
                end
            end

            # After setup..
            puts "Starting gdev.."
            system("cd #{globals["name"]} && gdev up")
            puts "Give admin username:"
            admin_user = gets
            puts "Give admin email:"
            admin_email = gets
            puts "Give admin password:"
            admin_password = gets
            wp_core_cmd = "gdev exec wp core install --url=#{globals["name"].strip}.test --title=#{globals["name"].strip} --admin_user=#{admin_user.strip} --admin_email=#{admin_email.strip} --admin_password=#{admin_password.strip}"
            puts "Installing WP core.."
            puts wp_core_cmd
            system("cd #{globals["name"]} && #{wp_core_cmd}")
            puts "Activating plugins.."
            system("cd #{globals["name"]} && gdev exec wp plugin activate --all")
        end

    end
end

Create.start(args)

.:/RUBY:.