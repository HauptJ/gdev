#!/usr/bin/env ruby
require 'open3'
require 'yaml'
require 'json'

class DevTool
  MAIN_HELP_BANNER = <<HEREDOC
Execute various commands within the developer environment

Usage:
  dev [options] [COMMAND] [ARGS...]"
  dev -h|--help

Options:
  --verbose                 Show more output
  -v, --version             Print version and exit

Commands:
  build              Build or rebuild services
  cleanup            Deletes docker containers, images and volumes
  create             Create new project
  exec               Run command inside web container
  help               Get help on a command
  kill               Kill containers
  logs               View output from containers
  ps                 List containers
  pull               Pulls service images
  restart            Restart services
  reload             Force recreates all services
  rm                 Remove stopped containers
  run                Run a one-off command
  shell              Open shell inside container
  service            Manage gdev services (nginx and dnsmasq, mail)
  start              Start services
  stop               Stop services
  sync               Syncronize files with data container
  up                 Create and start containers
  update             Update gdev environment

HEREDOC

  PROXY_UNMODIFIED_TO_COMPOSE=%w{build kill logs ps pull restart rm start stop}
  PROXY_MODIFIED=%w{up run}
  OTHER_COMMANDS=%w{reload cleanup machine update service status shell exec sync create}

  CREATE_HELP='Usage: $ gdev create --type=wordpress --components=dustpress --stage=stage.mydomain.com --production=cloud.mydomain.com --theme=ssh://git@domain:/theme.git --name="My app" --description="Short description of my app" --sitename=myapp --envvars=envvars.json --stage=stage.mydomain.com --production=cloud.mydomain.com --git=ssh://git@mydomain:/my-app.git'

  def initialize(args)
    if PROXY_UNMODIFIED_TO_COMPOSE.include?(args[0])
      system(args.unshift("docker-compose").join(" "))
    elsif PROXY_MODIFIED.include?(args[0])
      send(args[0].to_sym, args)
    elsif OTHER_COMMANDS.include?(args[0])
      send(args.shift.to_sym, args)
    else
      puts MAIN_HELP_BANNER
    end
  end

  def run(args)
    args.insert(1, "--rm")
    args.unshift("docker-compose")
    system(args.join(" "))
  end

  def reload(args)
    service(["up"])

    args.unshift("-d")
    args.unshift("--force-recreate")
    args.unshift("up")
    args.unshift("docker-compose")

    system(args.join(" "))

    after_reload()

    puts "INFO: To sync file changes in realtime to data container run $ gdev sync"
  end

  def cleanup(args)

    if args.include?('--images')

        puts "Removing all unused docker images..."
        images = `docker images -q`

        system "docker rmi #{images.tr("\n"," ")}" if $?.success? and not images.empty?

    elsif args.empty?

        puts "Removing exited docker containers..."

        containers = `docker ps -a -q -f status=exited`

        system "docker rm -v #{containers}" if $?.success? and not containers.empty?

        puts "Removing dangling docker images..."

        images = `docker images -f 'dangling=true' -q`

        system "docker rmi #{images}" if $?.success? and not images.empty?

        puts "Removing dangling docker volumes..."

        volumes = `docker volume ls -qf dangling=true`
        system "docker volume rm #{volumes}" if $?.success? and not volumes.empty?

    end

  end

  def up(args)
    service(["up"])

    # Run startup scripts
    before_up()

    args.insert(1, "-d")
    args.unshift("docker-compose")
    system(args.join(" "))

    settings = get_container_settings()

    if not settings['unison'].nil? and not settings['unison'].empty?
      # sync data
      puts "INFO: To sync file changes in realtime to data container $ gdev sync"
    end
  end

  # open shell into container
  def shell(args)
    container=`docker-compose ps -q web`.strip
    system("docker exec -it #{container} bash")
  end

  # Run command in web container
  def exec(args)
    container=`docker-compose ps -q web`.strip
    system "docker exec -it #{container} #{args.join(' ')}"
  end

  # Updating is just running bootstrap again with newer bootstrap bin
  def update(args)
    if (args[0] == "dns")
      system('ansible-playbook /usr/local/gdev-env/ansible/mac.yml -i 127.0.0.1, --ask-become-pass --verbose --tags=dns')
    elsif (args[0].nil?)
      system('cd /usr/local/gdev-env && git reset HEAD --hard && git pull origin HEAD && bin/bootstrap')
      # Rebuild and reload all services
      puts "Refreshing all gdev services..."
      service(['build nginx'])
      service(['reload'])
    else
      puts "Did you mean to run: $ gdev update ?"
    end
  end

  def service(args)
    if (args[0] == "reload")
      args[0] = "up"
      args.push("--force-recreate")
    end
    if (args[0] == "up")
      args.push("-d")
    elsif (args[0].nil?)
      no_command_given = true
    end
    args.unshift("docker-compose", "-f /usr/local/gdev-env/docker/services.yml", "-p gdev")
    box_ip="127.0.0.1"
    # Set system variables which we can use in our templates
    system({"BOX_IP" => box_ip},args.join(" "))

    # Tell about custom commands if help view was shown
    if (no_command_given)
      puts "  reload             Force updates all service containers"
    end
  end

  # Syntactic sugar for: $ gdev ps
  # I want this to look like vagrant binary
  def status(args)
    system("docker-compose ps")
  end

  # If docker-compose has container using onnimonni/unison container run that one first and sync
  def before_up()
    settings = get_container_settings()

    if settings['unison']

      # Start data container
      system("docker-compose up -d #{settings['unison']['container_name']}")
      # Give the container a moment to start
      sleep 1

      # Sync with the started container
      sync([ settings['unison']['container_name'], '-once', '-silent'] )

    end

    return settings
  end

  def after_reload()
    settings = get_container_settings()

    if not settings['unison'].nil? and not settings['unison']['port'].nil?
      # Sync with the started container
      sync([ settings['unison']['container_name'], '-once', '-silent'] )
    end
  end

  def get_container_settings()

    settings = {}
    config_string = `docker-compose config`
    if File.exist?('docker-compose.yml') and not config_string.empty?
        config = YAML.load(config_string)

        # If the docker-compose includes any unison containers sync with them
        config['services'].each do |container_name,data|

            if not data['image'].nil? and not data['image'].empty? and not data['ports'].nil? and data['image'].include? 'onnimonni/unison'

              settings = { 'unison' => { 'container_name' => container_name } }

              port = get_docker_host_port(container_name)
              settings['unison']['port'] = port unless port.nil?

            end
        end
    end

    return settings

  end

  def get_docker_host_port(container_name)
    # Get the data container id
    data_docker_id=`docker-compose ps -q #{container_name}`
    if $?.success? and not data_docker_id.empty?
        # Get the data container port
        data_docker_ports = `docker inspect --format='{{json .NetworkSettings.Ports}}' #{data_docker_id}`
        if $?.success? and data_docker_ports
            begin
                data_docker_ports_obj = JSON.parse(data_docker_ports)
                data_docker_host_port = data_docker_ports_obj["5000/tcp"][0]['HostPort']
                port = data_docker_host_port
                return port
            rescue JSON::ParserError
                # Container wasn't yet started
                return nil
            end
        end
    end
    return nil
  end

  def sync(args)

    options = ['-auto', '-batch', '-prefer newer']
    ignore = ['.git', '.docker','*.unison.tmp']
    container_name = 'data'

    # Repeat unless user provided -norepeat or -once flag
    if args.include?('-norepeat') or args.include?('-once')
      # Delete the pseudo options
      args.delete('-norepeat')
      args.delete('-once')

    # Else use repeat option if system includes dependency unison-fsmonitor
    elsif command_exists('unison-fsmonitor')
      options.push('-repeat watch')
    end

    # If args contains option without - in the beginning override container_name with that
    args.each { |arg|
        if arg.chars[0] != '-'
            container_name = arg
            args.delete(container_name)
        end
    }

    options += ignore.collect { |item| "-ignore 'Path #{item}'" }

    port = get_docker_host_port(container_name)

    puts "INFO: Starting to sync into port: #{port}..."

    unison_args = ( options | args ).join(' ')

    # Really no output please
    if args.include?('-silent')
      unison_args << ' > /dev/null'
    end

    system "UNISONLOCALHOSTNAME=dev-machine unison . socket://localhost:#{port}/ #{unison_args}"

    puts "INFO: Sync is ready!"
  end

  # Create new project command (validate arguments and start creating app or use wizard)
  def create(args)
    # validate arguments

    # got arguments
    unless args.empty?
      # TODO: parse_args method
      required_args = ['sitename', 'envvars', 'type']
      # loop given arguments
      used_args = []
      args_hash = Hash.new
      args.each { |argument|
        arg = argument.split('=')
        if arg.length == 2
          # every argument has value, check for required args

          # split argument to key value pair
          key = arg[0]
          val = arg[1]

          # remove all dashes from beginning of key
          key.sub! /\A-+/, ''
          # check for duplicate arguments
          if used_args.include?(key)
            puts "Duplicate arguments"
            puts CREATE_HELP
            exit
          else
            # keep track of used arguments
            used_args.push(key)
            
            # TODO: validate sitename (only lowercase chars, dashes or numbers)

            # set key and value to hash
            args_hash[key]=val
          end

          if required_args.include?(key)
            required_args.delete(key)
          end

        else
          # argument value missing, exit script and show help
          puts 'Argument '+arg[0]+' needs value'
          puts CREATE_HELP
          exit
        end
      }

      if required_args.length == 0
        # all required arguments given, proceed
      else
        # required arguments missing, exit script and show help
        puts "Arguments required:"
        puts required_args
        puts CREATE_HELP
        exit
      end

      # start creating project
      create_app(args_hash)

    else
      # no arguments given, start wizard
      create_wizard()

    end

  end

  # Create new site
  def create_app(args)

    unless validate_string(args['sitename'])
      puts "Sitename not valid."
      puts CREATE_HELP
      exit
    end

    puts "Creating project "+args['sitename']+"..."

    #puts args.inspect

    case args['type']
    when "wordpress"
      # setup wordpress project
      # check if project directory already exists
      unless Dir.exists?(args['sitename'])
        # clone wp-project from github
        puts "Cloning wp-project from git@github.com:devgeniem/wp-project.git to #{args['sitename']}..."
        puts `git clone git@github.com:devgeniem/wp-project.git #{args['sitename']}`
        if args['theme']
          puts "Cloning theme from #{args['theme']}..."
          puts `git clone #{args['theme']} #{args['sitename']}/web/app/themes/#{args['sitename']}`
        else
          # TODO: get default theme url from ~/.gdev/gdevconf.yml
          # do not get theme if default is not set
          puts "TODO"
          puts "Cloning default theme if set ~/.gdev/gdevconf.yml"
        end
        # check which components to install if any
        if args['components']
          components_array=args['components'].split(',')
          components_array.each { |component|
            case component
            when 'dustpress'
              # require dustpress components
              puts "Installing dustpress, dustpress-debugger and dustpress-js with composer..."
              puts `cd #{args["sitename"]}; composer require devgeniem/dustpress:1.* devgeniem/dustpress-debugger:1.* devgeniem/dustpress-js:*`
            else
              puts "Component "+component+" not supported."
            end
          }
        end
        # replace all THEMENAME and PROJECTNAME references from all files from this project to your project name
        puts "Replacing THEMENAME and PROJECTNAME strings from all project files with #{args['sitename']}..."
        themename_file_names = [
          "#{args['sitename']}/.drone.yml", 
          "#{args['sitename']}/config/application.php",
          "#{args['sitename']}/docker-compose.yml"
        ]
        themename_file_names.each do |file_name|
          text = File.read(file_name)
          new_contents = text.gsub(/THEMENAME/, "#{args['sitename']}")
          File.open(file_name, "w") {|file| file.puts new_contents }
        end
        projectname_file_names = [
          "#{args['sitename']}/.drone.yml"
        ]
        projectname_file_names.each do |file_name|
          text = File.read(file_name)
          new_contents = text.gsub(/PROJECTNAME/, "#{args['sitename']}")
          File.open(file_name, "w") {|file| file.puts new_contents }
        end
        # change project test address in docker-compose.yml for example wordpress.test -> client-name.test
        docker_compose = File.read("#{args['sitename']}/docker-compose.yml")
        docker_compose_replace = docker_compose.gsub(/wordpress.test/, "#{args['sitename']}.test")
        File.open("#{args['sitename']}/docker-compose.yml", "w") {|file| file.puts docker_compose_replace }

        # TODO: Add all people working in the project into authors section of composer.json and rename the project devgeniem/wp-project->devgeniem/client in composer.json
        
        # composer install
        puts "Running composer install..."
        puts `cd #{args["sitename"]}; composer install`
        # gdev up
        puts "Running gdev up..."
        puts `cd #{args["sitename"]}; gdev up`

        # seed (install wp)
        puts "Waiting for 10 seconds to be sure that docker instances are up and running..."
        sleep(10)
        puts "Running scripts/seed.sh..."
        puts `cd #{args["sitename"]}; gdev run web ./scripts/seed.sh`

        # temporary fix for redis-cache plugin, remove this when plugin works
        puts "Copying object-cache.php in place (temporary fix for redis-cache plugin)..."
        `cp #{args["sitename"]}/web/app/object-cache.php #{args["sitename"]}/web/app/plugins/redis-cache/includes`

        # gdev reload
        puts "Reloading gdev..."
        puts `cd #{args["sitename"]}; gdev reload`

        puts "Point your browser to https://#{args['sitename']}.test/wp-admin and log in"

        # TODO: help for setting up stage and production
        puts ""
        puts "To create stage environment run:"
        puts "$ flynn -c stage create #{args['sitename']} --remote=\"\""
        puts ""
        puts "Add mysql and redis resources for project:"
        puts "$ flynn -c stage -a upi resource add mysql"
        puts "$ flynn -c stage -a upi resource add redis"
        puts ""
        puts "Set environment variables:"
        puts "$ flynn -c stage -a #{args['sitename']} env set WP_ENV=staging"
        puts "$ flynn -c stage -a #{args['sitename']} env set WP_HOME=https://#{args['sitename']}.#{args['stage']}"
        puts "$ flynn -c stage -a #{args['sitename']} env set WP_SITEURL=https://#{args['sitename']}.#{args['stage']}"
        puts ""
        puts "To deploy your project to stage cluster, go to project directory root and run:"
        puts "$ docker build --pull -t devgeniem/#{args['sitename']}:stable ."
        puts "$ flynn -c stage -a #{args['sitename']} docker push devgeniem/#{args['sitename']}:stable"
        puts ""
        puts "Scale cluster as needed:"
        puts "$ flynn -c stage -a #{args['sitename']} scale app=1"
        puts ""
        puts "More help with Flynn, visit: <url>"
      else
        puts "Directory "+args['sitename']+" exists, please use another sitename."
        puts CREATE_HELP

        exit
      end


    when "nodejs"
      # setup nodejs project
      puts "nodejs project not implemented yet."
    when "silverbullet"
      # setup silverbullet project
      puts "silverbullet project not implemented yet."
    else
      puts "Type "+args['type']+" not supported."
    end

  end

  # validate string (alphanumeric chars and -)
  def validate_string(string)
    !string.match(/\A[-a-zA-Z0-9]*\z/).nil?
  end

  def get_defaults(type)
    defaults = Hash.new
    if File.exist?(ENV['HOME']+'/.gdev/gdevconf.yml')
      config = YAML.load(File.read(ENV['HOME']+"/.gdev/gdevconf.yml"))
      defaults = config['create']['defaults'][type]
    end
    return defaults
  end

  def create_wizard()
    # load default values
    defaults = get_defaults('wordpress')
    default_marker = "[default]"
    project = Hash.new
    puts "----------------------= Create new project =---------------------"

    puts "Name for the project:"
    project['name']=gets.chomp
    puts ""
    puts "Project description:"
    project['description']=gets.chomp
    puts ""
    puts "Sitename (lowercase characters, dashes and numbers only):"
    project['sitename']=gets.chomp
    unless validate_string(project['sitename'])
      puts "Sitename (lowercase characters, dashes and numbers only):"
      project['sitename']=gets.chomp
    end
    puts ""
    puts "Project type (wordpress"+default_marker+", nodejs, silverbullet):"
    project['type']=gets.chomp
    # wordpress specific settings
    if ['','wordpress'].include?(project['type'])
      # show selected default value
      if project['type'] == ""
        project['type']="wordpress"
        puts "wordpress"
      end
      puts ""
      puts "Components (dustpress):"
      project['components']=gets.chomp
      puts ""
      puts "Theme repository address, ssh or https (ssh://git@domain/theme.git):"
      project['theme']=gets.chomp
      puts ""
    end
    # set stage cluster domain
    if defaults['stage']
      puts "Flynn stage cloud address ("+defaults['stage']+default_marker+"):"
    else
      puts "Flynn stage cloud address (stage.mydomain.com):"
    end
    project['stage']=gets.chomp
    if project['stage'] == '' and defaults['stage']
      project['stage']=defaults['stage']
      puts defaults['stage']
    else
      puts '-- not set --'
    end
    puts ""
    # set production cluster domain
    if defaults['production']
      puts "Flynn production cloud address ("+defaults['production']+default_marker+"):"
    else
      puts "Flynn production cloud address (cloud.mydomain.com):"
    end
    project['production']=gets.chomp
    if project['production'] == '' and defaults['production']
      project['production']=defaults['production']
      puts defaults['production']
    else
      puts '-- not set --'
    end
    puts ""

    puts "Environment variables file (envvars.yml)"
    project['envvars']=gets.chomp
    puts ""
    puts "Project git repository, ssh or https (ssh://git@domain/my-app.git):"
    project['git']=gets.chomp
    
    puts ""
    puts "------------------------= Confirm input =------------------------"
    project.each { |key,val|
      puts key+": "+val
    }
    puts "-----= Enter Y to create project, something else to cancel =-----"
    puts ""
    confirm = gets.chomp
    puts ""
    if ['Y','y'].include?(confirm)
      create_app(project)
    else
      puts "Cancelled."
    end

    exit
  end

  # H.T. https://gist.github.com/lpar/1032297
  # Runs a specified shell command in a separate thread.
  # If it exceeds the given timeout in seconds, kills it.
  # Returns any output produced by the command (stdout or stderr) as a String.
  # Uses select to wait up to the tick length (in seconds) between
  # checks on the command's status
  #
  # If you've got a cleaner way of doing this, I'd be interested to see it.
  # If you think you can do it with Ruby's Timeout module, think again.
  #
  # This has been modified to have smaller sleeps. It may struggle with
  # commands that run for a very long time.
  def run_with_timeout(command, timeout, tick)
    output = ''
    begin
      # Start task in another thread, which spawns a process
      stdin, stderrout, thread = Open3.popen2e(command)
      # Get the pid of the spawned process
      pid = thread[:pid]
      start = Time.now

      while (Time.now - start) < timeout and thread.alive?
        # Wait up to `tick` seconds for output/error data
        select([stderrout], nil, nil, tick)
        # Try to read the data
        begin
          output << stderrout.read_nonblock(4096)
        rescue IO::WaitReadable
          # A read would block, so loop around for another select
        rescue EOFError
          # Command has completed, not really an error...
          break
        end
      end
      # Give Ruby time to clean up the other thread
      sleep 0.1

      if thread.alive?
        # We need to kill the process, because killing the thread leaves
        # the process alive but detached, annoyingly enough.
        Process.kill("TERM", pid)
        output = "Process timed out"
      end
    ensure
      stdin.close if stdin
      stderrout.close if stderrout
    end
    return output
  end

  # Cross-platform way of finding an executable in the $PATH.
  #
  #   which('ruby') #=> /usr/bin/ruby
  def command_exists(cmd)
    exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']
    ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
      exts.each { |ext|
        exe = File.join(path, "#{cmd}#{ext}")
        return exe if File.executable?(exe) && !File.directory?(exe)
      }
    end
    return nil
  end
end

DevTool.new(ARGV) if __FILE__==$0
