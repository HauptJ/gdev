#!/usr/bin/env ruby
require 'open3'

class DevTool
  MAIN_HELP_BANNER = <<HEREDOC
Execute various commands within the developer environment

Usage:
  dev [options] [COMMAND] [ARGS...]"
  dev -h|--help

Options:
  --verbose                 Show more output
  -v, --version             Print version and exit

Commands:
  build              Build or rebuild services
  exec               Run command inside web container
  help               Get help on a command
  kill               Kill containers
  logs               View output from containers
  machine            Manage the virtual machine
  ps                 List containers
  pull               Pulls service images
  restart            Restart services
  reload             Force recreates all services
  rm                 Remove stopped containers
  run                Run a one-off command
  shell              Open shell inside container
  service            Manage gdev services (nginx and dnsmasq, mail)
  start              Start services
  stop               Stop services
  up                 Create and start containers
  update             Update gdev environment

HEREDOC

  PROXY_UNMODIFIED_TO_COMPOSE=%w{build kill logs ps pull restart rm start stop}
  PROXY_MODIFIED=%w{up run}
  OTHER_COMMANDS=%w{reload machine update service status shell exec}

  def initialize(args)
    if PROXY_UNMODIFIED_TO_COMPOSE.include?(args[0])
      system(args.unshift("docker-compose").join(" "))
    elsif PROXY_MODIFIED.include?(args[0])
      send(args[0].to_sym, args)
    elsif OTHER_COMMANDS.include?(args[0])
      send(args.shift.to_sym, args)
    else
      puts MAIN_HELP_BANNER
    end
  end

  def run(args)
    args.insert(1, "--rm")
    args.unshift("docker-compose")
    system(args.join(" "))
  end

  def reload(args)
    service(["up"])
    args.insert(1, "-d")
    args.unshift("up")
    args.unshift("docker-compose")
    args.push("--force-recreate")
    system(args.join(" "))
  end

  def up(args)
    service(["up"])
    args.insert(1, "-d")
    args.unshift("docker-compose")
    system(args.join(" "))
  end

  def machine(args)
    if args.empty?
      puts `dlite --help`
    elsif args[0] == 'create'
      system('dlite install')
    else
      args.unshift('dlite')
      system(args.join(' '))
    end
  end

  # open shell into container
  def shell(args)
    container=`docker-compose ps -q web`.strip
    system("docker exec -it #{container} bash")
  end

  # Run command in web container
  def exec(args)
    container=`docker-compose ps -q web`.strip
    system "docker exec -it #{container} #{args.join(' ')}"
  end

  # Updating is just running bootstrap again with newer bootstrap bin
  def update(args)
    if (args[0] == "dns")
      system('ansible-playbook /usr/local/gdev-env/ansible/mac.yml -i 127.0.0.1, --ask-become-pass --verbose --tags=dns')
    elsif (args[0].nil?)
      system('cd /usr/local/gdev-env && git fetch && git reset --hard origin/master && bin/bootstrap')
      # Rebuild and reload all services
      puts "Refreshing all gdev services..."
      service(['build nginx'])
      service(['reload'])
    else
      puts "Did you mean to run: $ gdev update ?"
    end
  end

  def service(args)
    if (args[0] == "reload")
      args[0] = "up"
      args.push("--force-recreate")
    end
    if (args[0] == "up")
      args.push("-d")
    elsif (args[0].nil?)
      no_command_given = true
    end
    args.unshift("docker-compose", "-f /usr/local/gdev-env/docker/services.yml", "-p gdev")
    box_ip=`dlite ip`
    if $?.exitstatus != 0
      abort "ERROR: dlite doesn't have ip-address..."
    end
    # Set system variables which we can use in our templates
    system({"BOX_IP" => box_ip},args.join(" "))

    # Tell about custom commands if help view was shown
    if (no_command_given)
      puts "  reload             Force updates all service containers"
    end
  end

  # Syntactic sugar for: $ gdev ps
  # I want this to look like vagrant binary
  def status(args)
    system("docker-compose ps")
  end

  # H.T. https://gist.github.com/lpar/1032297
  # Runs a specified shell command in a separate thread.
  # If it exceeds the given timeout in seconds, kills it.
  # Returns any output produced by the command (stdout or stderr) as a String.
  # Uses select to wait up to the tick length (in seconds) between
  # checks on the command's status
  #
  # If you've got a cleaner way of doing this, I'd be interested to see it.
  # If you think you can do it with Ruby's Timeout module, think again.
  #
  # This has been modified to have smaller sleeps. It may struggle with
  # commands that run for a very long time.
  def run_with_timeout(command, timeout, tick)
    output = ''
    begin
      # Start task in another thread, which spawns a process
      stdin, stderrout, thread = Open3.popen2e(command)
      # Get the pid of the spawned process
      pid = thread[:pid]
      start = Time.now

      while (Time.now - start) < timeout and thread.alive?
        # Wait up to `tick` seconds for output/error data
        select([stderrout], nil, nil, tick)
        # Try to read the data
        begin
          output << stderrout.read_nonblock(4096)
        rescue IO::WaitReadable
          # A read would block, so loop around for another select
        rescue EOFError
          # Command has completed, not really an error...
          break
        end
      end
      # Give Ruby time to clean up the other thread
      sleep 0.1

      if thread.alive?
        # We need to kill the process, because killing the thread leaves
        # the process alive but detached, annoyingly enough.
        Process.kill("TERM", pid)
        output = "Process timed out"
      end
    ensure
      stdin.close if stdin
      stderrout.close if stderrout
    end
    return output
  end
end

DevTool.new(ARGV) if __FILE__==$0
