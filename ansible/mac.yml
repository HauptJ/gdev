---
- hosts: 127.0.0.1
  connection: local

  vars:
    gdev_env_dir: /usr/local/gdev-env
    gdev_user_files: "{{ansible_env.HOME}}/.gdev"
    machine_ip: 127.0.0.1

  tasks:

    - name: Check Sudo Password
      shell: echo "Sudo password works"
      become: yes
      become_method: sudo

    # Check that dlite is uninstalled
    - name: Remove dlite
      command: dlite uninstall
      args:
        removes: "{{ansible_env.HOME}}/.dlite/disk.img"
      become: yes
      become_method: sudo

    # Remove dlite nfs mounts
    - blockinfile:
        dest: /etc/exports
        state: absent
        marker: ": dlite"

    - name: Remove dlite binary
      homebrew: name=dlite state=absent

    - name: Install Docker for Mac
      homebrew_cask: name=docker state=present

    - name: Create gdev directory
      file:
        path: "{{ansible_env.HOME}}/.gdev"
        state: directory
        mode: 0755

    - name: Symlink gdev bin to PATH
      file:
        src: "{{gdev_env_dir}}/bin/gdev"
        dest: /usr/local/bin/gdev
        state: link
      tags: ['pre-install']

    - name: Start docker for mac
      command: "open -a docker"


    - name: "Check that we have /var/run/docker.sock socket"
      wait_for:
        path: /var/run/docker.sock
        state: present
        timeout: 20

    - name: "Check that we have /var/run/docker.sock socket"
      stat: path=/var/run/docker.sock
      register: docker_socket

    - name: Fail if no docker.sock
      fail: msg="Check that docker for mac is enabled! /var/run/docker.sock is not mounted :(..."
      when: not docker_socket.stat.exists

    - name: Start gdev services
      command: "{{ gdev_env_dir }}/bin/gdev service up"

    - name: Wait for signaler to create CA file
      wait_for:
        path: "{{ gdev_user_files }}/ca/ca.crt"
        state: present
        timeout: 30

    # This only works in OS X and doesn't affect firefox
    # We want to use https locally and you only use ca.key which is generated to you
    - name: Trust self-generated signaler Root certificate in keychain
      shell: "security add-trusted-cert -d -r trustRoot -k '/Library/Keychains/System.keychain' ca.crt"
      args:
        chdir: "{{ gdev_user_files }}/ca/"
      become: yes
      become_method: sudo

    - name: Create resolver directory
      file: path=/etc/resolver state=directory mode=0755
      become: yes
      become_method: sudo

    - name: Delete resolver files to trigger dns change
      file:
        path: "/etc/resolver/{{item.domain}}"
        state: absent
      become: yes
      become_method: sudo
      with_items:
        - { ip: "{{ machine_ip }}", domain: test }

    - name: Create dns resolver files at /etc/resolver/
      template:
        src: "{{ gdev_env_dir }}/ansible/resolver-dev.conf.j2"
        dest: "/etc/resolver/{{item.domain}}"
        force: yes
      become: yes
      become_method: sudo
      with_items:
        - { ip: "{{ machine_ip }}", domain: test }
